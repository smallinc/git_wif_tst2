---

    name: REUSABLE_WF_AUTHENTICATE
    on:
      workflow_call:
        secrets:
            GHA_PAT:
                required: true
        inputs:
            PROJECT_NAME:
                description: 'Project Level'
                required: true
                type: string
            RELEASE_BRANCH:
                description: 'Select the service release branch to checkout the code repo'
                required: true
                type: string


    
    # A workflow run is made up of one or more jobs that can run sequentially or in parallel
    jobs:         
      WC_Deploy_DBS_Cluster:
        runs-on: ubuntu-latest
        strategy:
          fail-fast: false

       # runs-on: ubuntu-latest
        # Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
          run:
            shell: bash

        steps:
                - name: Checkout
                  uses: actions/checkout@v2
                  with:
                    path: './test'
      
                - name: Check if actor is in Kk group
                  run: |
                      #get which directory to check
                      dir=/"${{ inputs.PROJECT_NAME }}"
                      echo dir input value: $dir
                      # GitHub personal access token
                      token="${{ secrets.TOKEN }}"
                      # User to search for
                      target_user="${{ github.actor }}"

                      echo current working directory: $PWD
                      file_path_codeowners="./.github/CODEOWNERS"
                      # echo ls -la output start
                      cd test
                      # ls -la
                      # echo ls -la end
                      
                      # Fetch the raw content of codeonwers file 
                      content_codeowners=$(cat ${file_path_codeowners})
                      #echo $content_codeowners
                      
                      # Process the content line by line
                      while IFS= read -r line; do
                      # Check if the line contains "/dev"
                      if [[ $line == *$dir* ]]; then
                          # Extract the value  for part /dev or /prod directory and add it to the array
                          value_after_dev=$(echo "$line" | awk -F"$dir" '{print $2}')
                          values+=("$value_after_dev")
                      fi
                      #done < "$file_path_codeowners"
                      done <<< "$content_codeowners"
                      # Print the values in the array
                      echo "Values after $dir 1: ${values[@]}"
                      echo "Values after $dir 2: $values"
                      list=($values)
      
                      #---------------
                      # Initialize empty lists to store extracted values
                      list_1=()
                      list_2=()
      
                      # Iterate over each value in the original list
                      for value in "${list[@]}"; do
                          # Extract the value between '@' and '/'
                          value_between_at_and_slash=${value##*@}
                          value_between_at_and_slash=${value_between_at_and_slash%%/*}
      
                          # Extract the value after '/'
                          value_after_slash=${value##*/}
      
                          # Add extracted values to the respective lists
                          list_1+=($value_between_at_and_slash)
                          list_2+=($value_after_slash)
                      done
      
                      # Print the extracted values
                      echo "list 1: ${list_1[@]}"
                      echo "list 2: ${list_2[@]}"
                      
                      #--------------
      
                      # GitHub organization
                      organization="$list_1"
                      echo org: $organization
            
                      # List of approved teams
                      # teams="$teams ${list_2[@]}"
                      # echo "Teams: ${teams[@]}"
      

      
                      # Function to check if a user is in a team
                      check_user_in_team() {
                          local team=$1
                          echo value of team:$team
                          local result=$(curl -s -H "Authorization: Bearer $token" "https://api.github.com/orgs/$organization/teams/$team/members/$target_user")
                          echo $result
      
                          if [[ $result == *"Bad credentials"* ]]; then
                              echo "User $target_user not found in team $team"
                          else
                              echo "User $target_user found in team $team"
                              exit 0  # Exit the script if user is found
                          fi
                      }
      
                      # Loop through the teams
                      for team in "${list_2[@]}"; do
                          check_user_in_team "$team"
                          #echo Team: $team
                      done
                      echo "User $target_user not found in team $team"
                      exit 1
      
      
                  shell: bash
            
